class Data {

    // ratios 
    // (koliko je nekaj veliko glede na navidezno oddaljenost tega nečesa; 
    // izraženo v deležu velikosti tega nečesa, ko je ta najbliže gledalcu);
    
    // pridobljeno z atangensno funkcijo (naraščanje vidnega kota s približevanjem predmeta)
    // for (let i = 11; i >= 0.82; i -= 0.04) {
    //     currRratio = 2*Math.atan2(0.5, i) - 0.05;
    //     funkcija, ki posnema spreminjanje vidnega kota odvisno od oddaljenosti objekta (oddaljenost je i; 0,5 pomeni velikost objekta, ki je enaka 1, deljeno z dva, ker taka je ta formula)
    //     da vrednosti od 0,04 do 0,096, kar se potem množi z r-jem; 0,05 je korekcija, ker zadeva dosti časa gravitira okoli 0,01, kar pa naredi prevelik krog na ekranu;
    // korekcije (- 0.05) v resnici ne sme bit, ker če ne je tunel ukrivljen, ko zaviješ, kot da gre v lep ovinek
    // pazi, da zadnji ni večji od 1, ker to pač nima veze (tudi če ga nariše, ni viden, zahteva pa CPU);
    // mora biti najmanj na 4 decimalke, sicer pleše sem in tja;


    // ZA PROGRAMATIČNO RABO
    //  - - NE POZABI DAT numLenghts na toliko, kot je let i = x pri for zanki izračuna  - - 
    static ratios = [];

    // ZA HARDCODED RABO - 16 ENOT  (i -= 0.04; v = Math.trunc((2*Math.atan2(0.5, i) - 0.022) * 10000) / 10000);
    //  - - NE POZABI DAT numLenghts na 16 - - 
    // static ratios = [0.0404,0.0406,0.0407,0.0409,0.0411,0.0412,0.0414,0.0415,0.0417,0.0419,0.042,0.0422,0.0424,0.0425,0.0427,0.0429,0.043,0.0432,0.0434,0.0435,0.0437,0.0439,0.0441,0.0442,0.0444,0.0446,0.0448,0.0449,0.0451,0.0453,
    //     0.0455,0.0457,0.0459,0.046,0.0462,0.0464,0.0466,0.0468,0.047,0.0472,0.0474,0.0476,0.0478,0.0479,0.0481,0.0483,0.0485,0.0487,0.0489,0.0491,0.0493,0.0496,0.0498,0.05,0.0502,0.0504,0.0506,0.0508,0.051,0.0512,0.0514,0.0517,
    //     0.0519,0.0521,0.0523,0.0525,0.0528,0.053,0.0532,0.0534,0.0537,0.0539,0.0541,0.0544,0.0546,0.0548,0.0551,0.0553,0.0556,0.0558,0.056,0.0563,0.0565,0.0568,0.057,0.0573,0.0575,0.0578,0.058,0.0583,0.0586,0.0588,0.0591,0.0593,
    //     0.0596,0.0599,0.0601,0.0604,0.0607,0.061,0.0612,0.0615,0.0618,0.0621,0.0624,0.0626,0.0629,0.0632,0.0635,0.0638,0.0641,0.0644,0.0647,0.065,0.0653,0.0656,0.0659,0.0662,0.0665,0.0669,0.0672,0.0675,0.0678,0.0681,0.0685,0.0688,
    //     0.0691,0.0695,0.0698,0.0701,0.0705,0.0708,0.0712,0.0715,0.0719,0.0722,0.0726,0.0729,0.0733,0.0737,0.074,0.0744,0.0748,0.0751,0.0755,0.0759,0.0763,0.0767,0.0771,0.0775,0.0779,0.0783,0.0787,0.0791,0.0795,0.0799,0.0803,0.0807,
    //     0.0812,0.0816,0.082,0.0825,0.0829,0.0833,0.0838,0.0842,0.0847,0.0851,0.0856,0.0861,0.0865,0.087,0.0875,0.088,0.0885,0.0889,0.0894,0.0899,0.0904,0.091,0.0915,0.092,0.0925,0.093,0.0936,0.0941,0.0946,0.0952,0.0957,0.0963,0.0969,
    //     0.0974,0.098,0.0986,0.0992,0.0998,0.1003,0.1009,0.1016,0.1022,0.1028,0.1034,0.104,0.1047,0.1053,0.106,0.1066,0.1073,0.108,0.1087,0.1093,0.11,0.1107,0.1114,0.1122,0.1129,0.1136,0.1144,0.1151,0.1159,0.1166,0.1174,0.1182,0.119,
    //     0.1198,0.1206,0.1214,0.1222,0.123,0.1239,0.1247,0.1256,0.1265,0.1274,0.1283,0.1292,0.1301,0.131,0.132,0.1329,0.1339,0.1349,0.1358,0.1369,0.1379,0.1389,0.1399,0.141,0.1421,0.1431,0.1442,0.1453,0.1465,0.1476,0.1488,0.1499,
    //     0.1511,0.1523,0.1536,0.1548,0.156,0.1573,0.1586,0.1599,0.1613,0.1626,0.164,0.1654,0.1668,0.1682,0.1697,0.1711,0.1726,0.1742,0.1757,0.1773,0.1789,0.1805,0.1822,0.1838,0.1855,0.1873,0.189,0.1908,0.1926,0.1945,0.1964,0.1983,
    //     0.2002,0.2022,0.2043,0.2063,0.2084,0.2105,0.2127,0.2149,0.2172,0.2195,0.2218,0.2242,0.2267,0.2291,0.2317,0.2343,0.2369,0.2396,0.2424,0.2452,0.248,0.251,0.254,0.257,0.2602,0.2634,0.2666,0.27,0.2734,0.2769,0.2805,0.2842,0.2879,
    //     0.2918,0.2958,0.2998,0.304,0.3082,0.3126,0.3171,0.3217,0.3265,0.3314,0.3364,0.3415,0.3468,0.3523,0.3579,0.3637,0.3697,0.3758,0.3822,0.3887,0.3955,0.4025,0.4097,0.4172,0.4249,0.4329,0.4412,0.4498,0.4587,0.4679,0.4775,0.4875,
    //     0.4978,0.5086,0.5198,0.5315,0.5438,0.5565,0.5698,0.5837,0.5983,0.6135,0.6295,0.6463,0.664,0.6826,0.7021,0.7227,0.7445,0.7675,0.7919,0.8177,0.8451,0.8742,0.9052,0.9383,0.9736];

    static numRatios = 0;
    static numRings = 10;    // kolko obročev bo predvidoma vidnih naenkrat na ekranu;
    static stepsInIntrvl = 0;
    static numLengths = 20;    // koliko enotskih dolžin obsega array ratios;
    static stepsPerUnit = 0;    // kolko ratiov obsega ena abstraktna dolžinska enota (teoretično enaka 2r ...);
    static shareOf1StepIn1Unit = 0; // 1/(Math.floor(Data.numRatios/Data.numLengths)) ; torej kolikšen del ene enote obsega en korak;
    static lightRingColor = '#ffffff';
    static prominentRingColor = '#30eefc'; // #ff893a - oranžna; #2ef82e - fluorescentno zelena; #30eefc - modra;
    static bckgndColor = '#313131';
    


}